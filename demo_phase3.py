"""
Phase 3 Testing Script: Core Business Entities
Tests vendor, organization, and product management APIs
"""
import asyncio
import sys
import os

# Add the backend directory to Python path
sys.path.insert(0, os.path.abspath('.'))

from app.database import engine
from app.models import *
from app.core.auth import get_password_hash
from sqlmodel import SQLModel, Session, select
from uuid import uuid4
from decimal import Decimal

def test_phase3_business_entities():
    """Test Phase 3 business entity functionality"""
    
    print("üöÄ Starting Phase 3: Core Business Entities Testing")
    print("=" * 60)
    
    # Create tables
    print("üìã 1. Setting up database tables...")
    SQLModel.metadata.create_all(engine)
    
    with Session(engine) as db:
        # Test data setup
        print("\nüë• 2. Creating test users...")
        
        # Create test users with unique phone numbers for Phase 3
        super_admin_id = uuid4()
        vendor_user_id = uuid4()
        org_user_id = uuid4()
        
        # Check if users already exist, if not create them
        existing_super_admin = db.exec(select(User).where(User.phone == "9000000003")).first()
        existing_vendor = db.exec(select(User).where(User.phone == "9111111113")).first()
        existing_org_user = db.exec(select(User).where(User.phone == "9222222223")).first()
        
        users_to_create = []
        
        if not existing_super_admin:
            users_to_create.append(User(
                id=super_admin_id,
                phone="9000000003",
                password_hash=get_password_hash("admin123"),
                user_type=UserType.APP_SUPER_ADMIN,
                first_name="Super",
                last_name="Admin",
                is_profile_complete=True
            ))
        else:
            super_admin_id = existing_super_admin.id
            
        if not existing_vendor:
            users_to_create.append(User(
                id=vendor_user_id,
                phone="9111111113",
                password_hash=get_password_hash("vendor123"),
                user_type=UserType.VENDOR,
                first_name="Vendor",
                last_name="User",
                is_profile_complete=True
            ))
        else:
            vendor_user_id = existing_vendor.id
            
        if not existing_org_user:
            users_to_create.append(User(
                id=org_user_id,
                phone="9222222223",
                password_hash=get_password_hash("org123"),
                user_type=UserType.ORGANIZATION_MEMBER,
                first_name="Org",
                last_name="User",
                is_profile_complete=True
            ))
        else:
            org_user_id = existing_org_user.id
        
        for user in users_to_create:
            db.add(user)
        
        if users_to_create:
            db.commit()
            print(f"‚úÖ Created {len(users_to_create)} new test users")
        else:
            print("‚úÖ Using existing test users")
        
        # Test Vendor Management
        print("\nüè™ 3. Testing Vendor Management...")
        
        vendor = Vendor(
            user_id=vendor_user_id,
            business_name="Tech Solutions Pvt Ltd",
            business_description="Leading technology solutions provider",
            business_address="123 Tech Park, Bangalore, Karnataka, 560001",
            business_phone="9111111111",
            business_email="contact@techsolutions.com",
            subscription_plan=SubscriptionPlan.PREMIUM,
            monthly_fee=Decimal('999.00'),
            created_by=super_admin_id
        )
        
        db.add(vendor)
        db.commit()
        db.refresh(vendor)
        print(f"‚úÖ Created vendor: {vendor.business_name} (ID: {vendor.id})")
        
        # Test vendor verification
        vendor.is_verified = True
        vendor.verification_status = VerificationStatus.VERIFIED
        vendor.verified_by = super_admin_id
        db.add(vendor)
        db.commit()
        print("‚úÖ Vendor verified successfully")
        
        # Test Organization Management
        print("\nüè¢ 4. Testing Organization Management...")
        
        organization = Organization(
            name="Global Corp Industries",
            description="International manufacturing and trading company",
            address="456 Business District, Mumbai, Maharashtra, 400001",
            phone="9222222222",
            email="info@globalcorp.com",
            industry="Manufacturing",
            employee_count=500,
            annual_revenue=50000000.0,
            credit_limit=1000000.0,
            created_by=super_admin_id
        )
        
        db.add(organization)
        db.commit()
        db.refresh(organization)
        print(f"‚úÖ Created organization: {organization.name} (ID: {organization.id})")
        
        # Add organization member
        org_member = OrganizationMember(
            user_id=org_user_id,
            organization_id=organization.id,
            role=OrganizationRole.ADMIN,
            department="Procurement",
            employee_id="EMP001",
            created_by=super_admin_id
        )
        
        db.add(org_member)
        db.commit()
        db.refresh(org_member)
        print(f"‚úÖ Added organization member with role: {org_member.role}")
        
        # Verify organization
        organization.is_verified = True
        organization.verification_status = VerificationStatus.VERIFIED
        organization.verified_by = super_admin_id
        db.add(organization)
        db.commit()
        print("‚úÖ Organization verified successfully")
        
        # Test Product Management
        print("\nüì¶ 5. Testing Product Management...")
        
        products = [
            Product(
                vendor_id=vendor.id,
                name="Professional Laptop Stand",
                description="Ergonomic aluminum laptop stand with adjustable height",
                short_description="Premium laptop stand for better ergonomics",
                category=ProductCategory.ELECTRONICS,
                subcategory="Computer Accessories",
                brand="TechStand",
                model="TS-Pro-2024",
                sku="TS-LP-001",
                price=Decimal('2499.00'),
                cost_price=Decimal('1800.00'),
                discount_percentage=Decimal('10.00'),
                tax_rate=Decimal('18.00'),
                stock_quantity=50,
                minimum_stock_level=10,
                weight=Decimal('1.2'),
                dimensions={"length": 25, "width": 20, "height": 15},
                attributes={"material": "aluminum", "color": "silver"},
                specifications={"weight_capacity": "5kg", "tilt_angle": "0-45 degrees"},
                is_featured=True,
                requires_shipping=True
            ),
            Product(
                vendor_id=vendor.id,
                name="Wireless Bluetooth Headphones",
                description="Premium noise-cancelling wireless headphones with 30-hour battery",
                short_description="High-quality wireless headphones",
                category=ProductCategory.ELECTRONICS,
                subcategory="Audio",
                brand="SoundMax",
                model="SM-WH-300",
                sku="SM-BT-002",
                price=Decimal('4999.00'),
                cost_price=Decimal('3500.00'),
                discount_percentage=Decimal('15.00'),
                tax_rate=Decimal('18.00'),
                stock_quantity=25,
                minimum_stock_level=5,
                weight=Decimal('0.3'),
                dimensions={"length": 18, "width": 16, "height": 8},
                attributes={"connectivity": "Bluetooth 5.0", "battery": "30 hours"},
                specifications={"frequency_response": "20Hz-20kHz", "impedance": "32 ohms"},
                is_featured=False,
                requires_shipping=True
            )
        ]
        
        for product in products:
            db.add(product)
        db.commit()
        
        for product in products:
            db.refresh(product)
            print(f"‚úÖ Created product: {product.name} (ID: {product.id})")
        
        # Test product approval
        for product in products:
            product.is_approved = True
            product.status = ProductStatus.ACTIVE
            product.approved_by = super_admin_id
            db.add(product)
        db.commit()
        print("‚úÖ All products approved and activated")
        
        # Test Data Queries
        print("\nüìä 6. Testing Data Queries...")
        
        # Count records
        vendor_count = len(db.exec(select(Vendor)).all())
        org_count = len(db.exec(select(Organization)).all())
        product_count = len(db.exec(select(Product)).all())
        member_count = len(db.exec(select(OrganizationMember)).all())
        
        print(f"üìà Database Statistics:")
        print(f"  - Vendors: {vendor_count}")
        print(f"  - Organizations: {org_count}")
        print(f"  - Products: {product_count}")
        print(f"  - Organization Members: {member_count}")
        
        # Test complex queries
        verified_vendors = len(db.exec(
            select(Vendor).where(Vendor.is_verified == True)
        ).all())
        
        active_products = len(db.exec(
            select(Product).where(
                Product.status == ProductStatus.ACTIVE,
                Product.is_approved == True
            )
        ).all())
        
        featured_products = len(db.exec(
            select(Product).where(Product.is_featured == True)
        ).all())
        
        print(f"üìã Business Metrics:")
        print(f"  - Verified Vendors: {verified_vendors}")
        print(f"  - Active Products: {active_products}")
        print(f"  - Featured Products: {featured_products}")
        
        # Test Business Logic
        print("\nüîÑ 7. Testing Business Logic...")
        
        # Calculate vendor metrics
        vendor_products = db.exec(
            select(Product).where(Product.vendor_id == vendor.id)
        ).all()
        
        total_inventory_value = sum(
            product.price * product.stock_quantity for product in vendor_products
        )
        
        print(f"üí∞ Vendor Business Metrics:")
        print(f"  - Total Products: {len(vendor_products)}")
        print(f"  - Total Inventory Value: ‚Çπ{total_inventory_value:,.2f}")
        print(f"  - Subscription: {vendor.subscription_plan.value} (‚Çπ{vendor.monthly_fee}/month)")
        
        # Organization metrics
        org_members = db.exec(
            select(OrganizationMember).where(
                OrganizationMember.organization_id == organization.id,
                OrganizationMember.is_active == True
            )
        ).all()
        
        print(f"üè¢ Organization Metrics:")
        print(f"  - Active Members: {len(org_members)}")
        print(f"  - Credit Limit: ‚Çπ{organization.credit_limit:,.2f}")
        print(f"  - Industry: {organization.industry}")
        
    print("\n" + "=" * 60)
    print("üéâ Phase 3: Core Business Entities - TESTING COMPLETED!")
    print("‚úÖ All business entity operations working successfully!")
    print("\nüìã Phase 3 Features Tested:")
    print("  ‚úÖ Vendor Management (CRUD, verification, subscription)")
    print("  ‚úÖ Organization Management (CRUD, member management)")
    print("  ‚úÖ Product Management (CRUD, approval, categorization)")
    print("  ‚úÖ Business Logic (inventory, metrics, relationships)")
    print("  ‚úÖ Database Integrity (foreign keys, constraints)")
    print("\nüöÄ Ready for Phase 4: Order Management & Workflows!")


if __name__ == "__main__":
    test_phase3_business_entities()
